# -*- coding: utf-8 -*-
"""
/***************************************************************************
 TransparencySetter
                                 A QGIS plugin
 Apply the specified transparency value to both vector and raster layers, as well as layers within the selected groups in the Layer Panel
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2023-05-10
        git sha              : $Format:%H$
        copyright            : (C) 2023 by Idrostudi Srl
        email                : martinis@idrostudi.it
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.core import QgsVectorLayer, QgsRasterLayer
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction
from PyQt5.QtWidgets import QWidgetAction, QSlider, QLabel, QSpinBox, QStyleOptionSlider, QStyle
from PyQt5.QtCore import Qt
from PyQt5.QtGui import QIntValidator, QColor
from PyQt5.QtCore import Qt, QPoint


# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .transparency_setter_dialog import TransparencySetterDialog
import os.path


class SteppedSlider(QSlider):
    def __init__(self, orientation, parent=None):
        super(SteppedSlider, self).__init__(orientation, parent)

    def mouseMoveEvent(self, e):
        opt = QStyleOptionSlider()
        self.initStyleOption(opt)
        sr = self.style().subControlRect(QStyle.CC_Slider, opt, QStyle.SC_SliderHandle, self)

        if e.buttons() & Qt.LeftButton:
            if sr.contains(e.pos()) == False:
                new_value = self.style().sliderValueFromPosition(self.minimum(), self.maximum(), e.x(), sr.width())
                stepped_value = round(new_value / 10) * 10
                self.setValue(stepped_value)
                e.accept()
        super(SteppedSlider, self).mouseMoveEvent(e)



class TransparencySetter:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'TransparencySetter_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Transparency Setter')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('TransparencySetter', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        # will be set False in run()
        self.first_start = True

        # Create a slider widget
        self.slider = SteppedSlider(Qt.Horizontal)
        self.slider.setMaximumWidth(100)  # Set slider maximum width
        self.slider.setRange(0, 100)  # Range from 0 to 100
        self.slider.setValue(0)  # Initial value
        self.slider.setTickInterval(10)  # Set slider tick interval
        self.slider.setPageStep(10)  # Set slider page step
        self.slider.setSingleStep(10)  # Set slider single step
        self.slider.setTracking(True)
        self.slider.valueChanged.connect(self.slider_changed)

        # Create a label widget
        self.label = QLabel("Transparency:")

        # Create a QSpinBox widget
        self.transparency_input = QSpinBox()
        self.transparency_input.setRange(0, 100)  # Range from 0 to 100
        self.transparency_input.setValue(0)  # Initial value
        self.transparency_input.setSingleStep(10)  # Set step size to 10
        self.transparency_input.valueChanged.connect(self.spin_box_changed)

        # Add widgets to the toolbar
        self.toolbar = self.iface.addToolBar("Layer Transparency Toolbar")
        self.toolbar.setObjectName("Layer Transparency Toolbar")
        
        self.toolbar.addWidget(self.label)
        self.toolbar.addWidget(self.transparency_input)
        self.toolbar.addWidget(self.slider)

        self.iface.layerTreeView().selectionModel().selectionChanged.connect(self.update_slider_from_selected_layer)


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Transparency Setter'),
                action)
            self.iface.removeToolBarIcon(action)


    def apply_transparency(self, transparency):
        layer_tree_view = self.iface.layerTreeView()
        selected_nodes = layer_tree_view.selectedNodes()

        def apply_transparency_to_group(group_node, transparency):
            for layer_node in group_node.children():
                self.apply_transparency_to_layer(layer_node.layer(), transparency)

        if selected_nodes:
            for selected_node in selected_nodes:
                if selected_node.nodeType() == 0:
                    apply_transparency_to_group(selected_node, transparency)
                elif selected_node.nodeType() == 1:
                    self.apply_transparency_to_layer(selected_node.layer(), transparency)
        else:
            print("Please select one or more groups and/or layers in the Layer Panel.")

    def apply_transparency_to_layer(self, layer, transparency):
        opacity = (100 - transparency) / 100.0
        if isinstance(layer, QgsVectorLayer):
            layer.setOpacity(opacity)
        elif isinstance(layer, QgsRasterLayer):
            layer.renderer().setOpacity(opacity)
        layer.triggerRepaint()


    def update_slider_from_selected_layer(self):
        layer_tree_view = self.iface.layerTreeView()
        selected_nodes = layer_tree_view.selectedNodes()

        if selected_nodes:
            selected_node = selected_nodes[0]

            if selected_node.nodeType() == 0:  # Check if the selected node is a group
                group_node = selected_node
                layer_nodes = group_node.children()
                transparency_values = []
                if layer_nodes != []:
                    for layer_node in layer_nodes:
                        layer = layer_node.layer()
                        if isinstance(layer, QgsRasterLayer):
                            transparency = (1.0 - layer.renderer().opacity()) * 100.0
                        elif isinstance(layer, QgsVectorLayer):
                            transparency = (1.0 - layer.opacity()) * 100.0
                        transparency_values.append(transparency)
                    if len(set(transparency_values)) == 1:  # All layers have the same transparency
                        transparency = transparency_values[0]
                        self.transparency_input.setStyleSheet("color: black;")
                    else:  # Layers have different transparency settings
                        transparency = transparency_values[0]
                        self.transparency_input.setStyleSheet("color: red;")
                else:
                    layer = []

            elif selected_node.nodeType() == 1:  # Check if the selected node is a layer
                layer = selected_node.layer()
                if isinstance(layer, QgsRasterLayer):
                    transparency = (1 - layer.renderer().opacity()) * 100.0
                elif isinstance(layer, QgsVectorLayer):
                    transparency = (1 - layer.opacity()) * 100.0
                self.transparency_input.setStyleSheet("color: black;")

            if layer:
                self.slider.setValue(transparency)
                self.transparency_input.setValue(int(transparency))


    def slider_changed(self, value):
        """Handle slider value changes and update the transparency."""
        #self.label.setText(f"Transparency: {value}%")
        self.label.setText(f"Transparency:")
        self.transparency_input.setValue(int(value))
        self.apply_transparency(value)

    def spin_box_changed(self, value):
        self.slider.setValue(value)
        self.apply_transparency(value)


    def run(self):
        """This method is no longer needed as the slider directly handles the transparency."""
        pass